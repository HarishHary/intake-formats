name: wiz-issues
pipeline:
  - name: json_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
        output_field: message

  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: "{{json_event.message.createdAt}}"
        output_field: datetime

  - name: parsed_endpoint
    filter: "{{json_event.message.entitySnapshot.get('type') == 'ENDPOINT'}}"
    external:
      name: grok.match
      properties:
        input_field: "{{json_event.message.entitySnapshot.name}}"
        pattern: "%{DATA:ip_or_url}:%{NUMBER:port}"

  - name: set_ecs_fields
stages:
  set_ecs_fields:
    actions:
      - set:
          event.kind: "alert"
          event.category: ["intrusion_detection"]
          event.type: ["info"]
          observer.vendor: "Wiz"
          event.dataset: "Issues"

          "@timestamp": "{{parsed_date.datetime}}"

          log.level: "{{json_event.message.severity}}"

          rule.id: "{{json_event.message.sourceRule.id}}"
          rule.name: "{{json_event.message.sourceRule.name}}"

          wiz.issues.status: "{{json_event.message.status}}"
          wiz.issues.type: "{{json_event.message.type}}"
          wiz.issues.id: "{{json_event.message.id}}"

          wiz.issues.entitySnapshot.name: "{{json_event.message.entitySnapshot.name}}"
          wiz.issues.entitySnapshot.type: "{{json_event.message.entitySnapshot.type}}"

      - set:
          wiz.issues.securitySubCategories.titles: >
            [ {%- for subcategory in json_event.message.sourceRule.securitySubCategories -%}
              "{{subcategory.title}}",
              {%- endfor -%}
            ]
        filter: "{{json_event.message.sourceRule.get('securitySubCategories') != None}}"

      - set:
          vulnerability.name: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'SECURITY_TOOL_FINDING'}}"

      - set:
          cloud.instance.name: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'VIRTUAL_MACHINE'}}"

      - set:
          user.target.email: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'USER_ACCOUNT'}}"

      - set:
          container.name: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'CONTAINER'}}"

      - set:
          container.image.name: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'CONTAINER_IMAGE'}}"

      - set:
          host.name: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') in ('LOAD_BALANCER', 'VIRTUAL_WORKSTATION', 'DB_SERVER')}}"

      - set:
          destination.ip: "{{parsed_endpoint.message.ip_or_url}}"
          destination.port: "{{parsed_endpoint.message.port}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'ENDPOINT' and parsed_endpoint.message.ip_or_url | is_ipaddress}}"

      - set:
          url.full: "{{json_event.message.entitySnapshot.name}}"
        filter: "{{json_event.message.entitySnapshot.get('type') == 'ENDPOINT' and not parsed_endpoint.message.ip_or_url | is_ipaddress}}"
