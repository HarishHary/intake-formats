name: vade-cloud
pipeline:
  - name: parse_event
    external:
      name: json.parse-json
      properties:
        input_field: "{{original.message}}"
        output_field: "message"

  - name: parse_timestamp
    external:
      name: date.parse
      properties:
        input_field: "{{parse_event.message.date}}"
        output_field: date

  - name: set_base_fields

stages:
  set_base_fields:
    actions:
      - set:
          "@timestamp": "{{ parse_timestamp.date }}"

      - set:
          event.category: ["email"]
          event.type: ["info"]
          #          event.action: "{{ parse_event.message.h_action }}"
          #          event.reason: "{{ parse_event.message.h_reason }}"
          event.action: "No action"
          event.reason: "{{ parse_event.message.reason }}"

      - set:
          event.action: "{{ parse_event.message.last_remediation_actions[0] }}"
        filter: "{{ parse_event.message.last_remediation_actions | length > 0 }}"

      - set:
          email.from.address: ["{{ parse_event.message.owner}}"]
          email.to.address: ["{{ parse_event.message.comm_partner }}"]
          email.direction: "Outgoing"
        filter: "{{ parse_event.message.get('direction') != 1}}"

      - set:
          email.from.address: ["{{ parse_event.message.comm_partner}}"]
          email.to.address: ["{{ parse_event.message.owner }}"]
          email.direction: "Incoming"
        filter: "{{ parse_event.message.get('direction') == 1}}"

      - set:
          #          email.from.address: ["{{ parse_event.message.from }}"]
          #          email.to.address: ["{{ parse_event.message.to }}"]
          #          email.direction: "{{ parse_event.message.direction }}"
          email.subject: "{{ parse_event.message.subject }}"
          email.message_id: "{{ parse_event.message.message_id }}"
          source.ip: "{{ parse_event.message.source_ip }}"
          destination.domain: "{{ parse_event.message.destination_domain }}"
          destination.ip: "{{ parse_event.message.destination_ip }}"

      - set:
          #          hornetsecurity.email.classification: "{{ parse_event.message.h_classification }}"
          #          hornetsecurity.email.crypt_type_in: "{{ parse_event.message.h_crypt_type_in }}"
          #          hornetsecurity.email.crypt_type_out: "{{ parse_event.message.h_crypt_type_out }}"
          #          hornetsecurity.email.status: "{{ parse_event.message.h_status }}"
          #          hornetsecurity.email.size: "{{ parse_event.message.h_size }}"
          #          hornetsecurity.email.source_hostname: "{{ parse_event.message.h_source_hostname }}"
          #          hornetsecurity.email.destination_hostname: "{{ parse_event.message.h_destination_hostname }}"
          #          hornetsecurity.email.private: "{{ parse_event.message.h_private }}"
          #          hornetsecurity.email.gateway: "{{ parse_event.message.h_gateway }}"
          #          hornetsecurity.email.has_url_rewritten: "{{ parse_event.message.h_has_url_rewritten }}"
          hornetsecurity.email.classification: "{{ parse_event.message.classification.text | capitalize }}"
          hornetsecurity.email.crypt_type_in: "{{ parse_event.message.crypt_type_in.text }}"
          hornetsecurity.email.crypt_type_out: "{{ parse_event.message.crypt_type_out.text }}"
          hornetsecurity.email.status: "{{ parse_event.message.status.text | capitalize }}"
          hornetsecurity.email.source_hostname: "{{ parse_event.message.source_hostname }}"
          hornetsecurity.email.destination_hostname: "{{ parse_event.message.destination_hostname }}"

          hornetsecurity.email.private: "{{ parse_event.message.get('private', False) }}"
          hornetsecurity.email.gateway: "{{ parse_event.message.gateway }}"
          hornetsecurity.email.has_url_rewritten: "{{ parse_event.message.get('has_url_rewritten', False) }}"

      - set:
          hornetsecurity.email.size: "Unknown"
      - set:
          hornetsecurity.email.size: "{{ parse_event.message.size.value }} {{ parse_event.message.size.unit }}"
        filter: "{{ parse_event.message.size.get('value') != None and parse_event.message.size.get('unit') != None }}"

      - set:
          email.attachments: "{{ parse_event.message.attachments }}"
        filter: "{{ parse_event.message.attachments not in [null, '', 'no'] }}"
